@page "/simple"
@using Excubo.Blazor.Diagrams

<Diagram @ref="Diagram">
    <NodeLibrary style="background-color: aliceblue; border: 1px solid blue; " Orientation="Orientation.Vertical">
        <RectangleNode>
            <div style="width:5em; height:3em; margin: 1em;">
                Template rectangle
            </div>
        </RectangleNode>
        <RectangleNode>
            <input style="margin:1em; pointer-events:visiblePainted" type="text" placeholder="editable!" />
        </RectangleNode>
        <DiamondNode>
            <div style="width:5em; height:3em; margin: 1em;">
                Template diamond
            </div>
        </DiamondNode>
        <EllipseNode>
            <div style="width:5em; height:3em; margin: 1em;">Template Ellipse</div>
        </EllipseNode>
        <Node Type="NodeType.Ellipse">
            <div style="width:5em; height:3em; margin: 1em;">Template Node</div>
        </Node>
        <UserNodeCode>
            <div style="width:5em; height:3em; margin: 1em;">Template User-defined!</div>
        </UserNodeCode>
    </NodeLibrary>
    <Nodes DefaultType="NodeType.Ellipse" OnRemove="NodeRemoved" OnAdd="NodeAdded">
        <!-- Adding a single node. As the node type is not specified, the type is taken from the default node type as defined in diagram's node collection. If that's missing, it defaults to Rectangle. In this case, we'll get an ellipse -->
        <Node Id="123" X="1000" Y="150">
            <div style="width:5em">
                Hello node with id @context.Id
            </div>
        </Node>

        <!---->
        @foreach (var state in states)
        {
            <!-- Builtin node, node-type (i.e. shape) specified by Type property -->
            <Node @key="state.Id" Id="@state.Id" X="state.X" Y="state.Y" Type="NodeType.Rectangle">
                State @state.Id
            </Node>
        }
        @foreach (var decision in decisions)
        {
            <!-- Builtin node, node-type specified by strongly typed component -->
            <DiamondNode @key="decision.Id" Id="@decision.Id" X="decision.X" Y="decision.Y">
                <div style="color:green; width: 100px; height: 100px">Decision @decision.Id</div>
            </DiamondNode>
        }
        <!-- Custom node, inherits from NodeBase. -->
        <UserNodeCode Id="abc" X="900" Y="550">
            Hello custom node.
        </UserNodeCode>
    </Nodes>
    <!-- side note: maybe rename link to connector, as link seems to be a special tag, so auto-correct corrects Link to link all the time. -->
    <Links OnModified="LinkModified" OnRemove="LinkRemoved" OnAdd="LinkAdded" @bind-DefaultType="link_type" @bind-DefaultArrow="arrows">
        <!-- Adding a single link. As the link type is not specified, the type is taken from the default link type as defined in diagram. If that's missing, it defaults to Straight. In this case, we'll get Straight -->
        @foreach (var link in links)
        {
            <Link Source="link.Source" Target="link.Target" Type="link.Type" Arrow="Arrow.Target" />
        }
    </Links>
    <NavigationSettings @bind-Origin="Origin" @bind-Zoom="Zoom" MinZoom=".1" MaxZoom="20" />
    <LinkSelectorSettings Position="Position.TopRight" />
    <OverviewSettings />
</Diagram>

@code {
    private LinkType link_type { get; set; } = LinkType.Curved;
    private Arrow arrows { get; set; } = Arrow.Both;
    private Point Origin { get; set; } = new Point(0, 0);
    private double Zoom { get; set; } = 1;
    public class MyNodeDefinition
    {
        public string Id { get; set; }
        public double X { get; set; }
        public double Y { get; set; }
    }
    public class MyLinkDefinition
    {
        public NodeAnchor Source { get; set; }
        public NodeAnchor Target { get; set; }
        public LinkType Type { get; set; }
    }
    List<MyNodeDefinition> states = new List<MyNodeDefinition>
    {
        new MyNodeDefinition
        {
            Id = "state1",
            X = 400,
            Y = 150
        },
        new MyNodeDefinition
        {
            Id = "state2",
            X = 800,
            Y = 350
        }
    };
    List<MyNodeDefinition> decisions = new List<MyNodeDefinition>
    {
        new MyNodeDefinition
        {
            Id = "decision1",
            X = 600,
            Y = 250
        }
    };
    List<MyLinkDefinition> links = new List<MyLinkDefinition>
    {
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = "abc", Port = Position.North }, Target = new NodeAnchor { NodeId = "123", Port = Position.South }, Type = LinkType.Angled },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = "state1", Port = Position.SouthEast }, Target = new NodeAnchor { NodeId = "decision1", Port = Position.NorthWest }, Type = LinkType.Curved },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = "decision1", Port = Position.SouthEast }, Target = new NodeAnchor { NodeId = "state2", Port = Position.NorthWest }, Type = LinkType.Straight }
    };
    List<MyNodeDefinition> created_nodes = new List<MyNodeDefinition>
    {

    };
    private Diagram Diagram { get; set; }
    private void NodeAdded(NodeBase node)
    {
        created_nodes.Add(new MyNodeDefinition
        {
            Id = node.Id,
            X = node.X,
            Y = node.Y
        });
    }
    private void NodeRemoved(NodeBase node)
    {
        // the node needs to be removed from the collections we manage
        MyNodeDefinition match;
        match = decisions.FirstOrDefault(d => d.Id == node.Id);
        if (match != null)
        {
            decisions.Remove(match);
        }
        match = states.FirstOrDefault(d => d.Id == node.Id);
        if (match != null)
        {
            states.Remove(match);
        }
        match = created_nodes.FirstOrDefault(d => d.Id == node.Id);
        if (match != null)
        {
            created_nodes.Remove(match);
        }
    }
    private void LinkModified(LinkBase link)
    {
        // user code, e.g. change color
    }
    private void LinkRemoved(LinkBase link)
    {
        Console.WriteLine($"A link was removed: {link.Source} -> {link.Target}");
    }
    private void LinkAdded(LinkBase link)
    {
        Console.WriteLine($"A link was added: {link.Source} -> {link.Target}");
    }
}