@page "/ports"
@using Excubo.Blazor.Diagrams

<Diagram @ref="Diagram">
    <Nodes>
        @{
            string prefix;
            prefix = "r";
            foreach (var node in nodes)
            {
                <RectangleNode @key="@(prefix + node.Id)" Id="@(prefix + node.Id)" X="node.X" Y="node.Y">
                    @node.Text
                </RectangleNode>
            }
            prefix = "d";
            foreach (var node in nodes)
            {
                <DiamondNode @key="@(prefix + node.Id)" Id="@(prefix + node.Id)" X="300 + node.X" Y="node.Y">
                    @node.Text
                </DiamondNode>
            }
            prefix = "e";
            foreach (var node in nodes)
            {
                <EllipseNode @key="@(prefix + node.Id)" Id="@(prefix + node.Id)" X="node.X" Y="300 + node.Y">
                    @node.Text
                </EllipseNode>
            }
        }
    </Nodes>
    <Links>
        @foreach (var link in links)
        {
            <Link @key="link.Source.NodeId + link.Target.NodeId" Source="link.Source" Target="link.Target" />
        }
    </Links>
    <NavigationSettings Origin="origin" />
</Diagram>

@code {
    private Point origin { get; set; } = new Point(-100, -100);
    public class MyNodeDefinition
    {
        public string Id { get; set; }
        public double X { get; set; }
        public double Y { get; set; }
        public string Text { get; set; }
    }
    List<MyNodeDefinition> nodes = new List<MyNodeDefinition>
    {
        new MyNodeDefinition { Id = "c", X = 0, Y = 0, Text = "Center" },
        new MyNodeDefinition { Id = "n", X = 0, Y = -100, Text = "North" },
        new MyNodeDefinition { Id = "s", X = 0, Y = 100, Text = "South" },
        new MyNodeDefinition { Id = "e", X = 100, Y = 0, Text = "East" },
        new MyNodeDefinition { Id = "w", X = -100, Y = 0, Text = "West" },
        new MyNodeDefinition { Id = "ne", X = 100, Y = -100, Text = "North East" },
        new MyNodeDefinition { Id = "se", X = 100, Y = 100, Text = "South East" },
        new MyNodeDefinition { Id = "sw", X = -100, Y = 100, Text = "South West" },
        new MyNodeDefinition { Id = "nw", X = -100, Y = -100, Text = "North West" }
    };
    public class MyLinkDefinition
    {
        public NodeAnchor Source { get; set; }
        public NodeAnchor Target { get; set; }
        public LinkType Type { get; set; }
    }
    List<MyLinkDefinition> links = new string[] { "r", "d", "e" }.SelectMany(prefix => new List<MyLinkDefinition>
{
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.West }, Target = new NodeAnchor { NodeId = prefix + "w", Port = Position.East } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.NorthWest }, Target = new NodeAnchor { NodeId = prefix + "nw", Port = Position.SouthEast } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.North }, Target = new NodeAnchor { NodeId = prefix + "n", Port = Position.South } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.NorthEast }, Target = new NodeAnchor { NodeId = prefix + "ne", Port = Position.SouthWest } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.East }, Target = new NodeAnchor { NodeId = prefix + "e", Port = Position.West } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.SouthEast }, Target = new NodeAnchor { NodeId = prefix + "se", Port = Position.NorthWest } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.South }, Target = new NodeAnchor { NodeId = prefix + "s", Port = Position.North } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.SouthWest }, Target = new NodeAnchor { NodeId = prefix + "sw", Port = Position.NorthEast } },
    }).ToList();
    private Diagram Diagram { get; set; }
}