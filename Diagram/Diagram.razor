@using Excubo.Blazor.Diagrams.__Internal
@using Excubo.Blazor.Diagrams.Extensions

<Excubo.Blazor.ScriptInjection.Script Src="@JSRuntimeExtensions.JsSource" />
@using (var temporary_culture = new CultureSwapper())
{
    <div style="width: 100%; height: 100%; position: relative; overflow: hidden; cursor: grab;"
         @ref="canvas"
         tabindex="-1"
         @onkeydown="OnKeyPress"
         @onmousemove="OnMouseMove"
         @onmousemove:preventDefault
         @onmousedown="OnMouseDown"
         @onmouseup="OnMouseUp"
         @onmousewheel="OnMouseWheel"
         @onmousewheel:preventDefault>
        <CascadingValue Value="@this" IsFixed="true">
            <!-- area for nodes and links -->
            <svg style=" width: 100%; height: 100%; position: absolute; top: 0; left: 0;">
                <g transform="translate(@(-1 * NavigationSettings.Zoom * NavigationSettings.Origin.X)
                                    @(-1 * NavigationSettings.Zoom * NavigationSettings.Origin.Y))">
                    @using (var suspension = temporary_culture.Suspend())
                    {
                        @ChildContent
                    }
                </g>
            </svg>
            <!-- area for node contents -->
            <div style="position: absolute;
                    left: @(-1 * NavigationSettings.Zoom * NavigationSettings.Origin.X)px;
                    top: @(-1 * NavigationSettings.Zoom * NavigationSettings.Origin.Y)px;
                    right: -200px;
                    bottom: -200px;
                    pointer-events: none;">
                <Renderer @ref="node_content_renderer" Region="div" />
            </div>
            <!-- area for node borders -->
            <svg style=" width: 100%; height: 100%; position: absolute; top: 0; left: 0; pointer-events: none">
                <g transform="translate(@(-1 * NavigationSettings.Zoom * NavigationSettings.Origin.X)
                                    @(-1 * NavigationSettings.Zoom * NavigationSettings.Origin.Y))">
                    <Renderer @ref="node_border_renderer" Region="g" />
                </g>
            </svg>
            <!-- area for nodes in the node library -->
            <div style="@(NewNodeAddingInProgress ? "opacity: 0.1; pointer-events:none" : "")">
                @if (NodeLibrary != null)
                {
                    <NodeLibraryArea Orientation="@NodeLibrary.Orientation" AdditionalAttributes="@NodeLibrary.AdditionalAttributes">
                        <CascadingValue Value="NodeLibrary" IsFixed="true">
                            @NodeLibrary.ChildContent
                        </CascadingValue>
                    </NodeLibraryArea>;
                }
                <div style="position: absolute;">
                    <Renderer @ref="node_template_content_renderer" Region="div" />
                </div>
            </div>
            @if (LinkSelectorSettings != null)
            {
                <DefaultLinkSelector Position="LinkSelectorSettings.Position" Type="Links.DefaultType" TypeChanged="Links.DefaultTypeChanged" Arrow="Links.DefaultArrow" ArrowChanged="Links.DefaultArrowChanged" />
            }
            @if (OverviewSettings != null)
            {
                <Overview @ref="Overview" />
            }
        </CascadingValue>
    </div>
}
@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    private ElementReference canvas;
    private Renderer node_template_content_renderer;
    private Renderer node_content_renderer;
    private Renderer node_border_renderer;
    private Overview Overview;
    internal void AddNodeContentFragment(RenderFragment content) => node_content_renderer.Add(content);
    internal void AddNodeTemplateContentFragment(RenderFragment content) => node_template_content_renderer.Add(content);
    internal void AddNodeBorderFragment(RenderFragment content) => node_border_renderer.Add(content);
    internal void RemoveNodeContentFragment(RenderFragment content) => node_content_renderer.Remove(content);
    internal void RemoveNodeTemplateContentFragment(RenderFragment content) => node_template_content_renderer.Remove(content);
    internal void RemoveNodeBorderFragment(RenderFragment content) => node_border_renderer.Remove(content);
}
