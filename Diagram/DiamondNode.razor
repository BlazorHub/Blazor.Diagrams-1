@inherits NodeBase
@using Excubo.Blazor.Diagrams.Extensions
@if (Deleted)
{
    return;
}
@using (var temporary_culture = new CultureSwapper())
{
    <g transform="@PositionAndScale">
        <polygon points="
                    0,0
                    @(Width / 2),@(-Height/2)
                    @(Width),0
                    @(Width*1.5),@(Height/2)
                    @(Width),@(Height)
                    @(Width / 2),@(Height*1.5)
                    0,@(Height)
                    @(-Width / 2),@(Height / 2)" 
                    @onmouseover="OnNodeOver"
                    @onmouseout="OnNodeOut"
                 stroke="@Stroke"
                 stroke-width="2px"
                 fill="@Fill"
                 style="@(Hidden? "display:none;" : "") @(Selected ? "stroke-dasharray: 8 2; animation: diagram-node-selected 0.4s ease infinite;" : "")"/>
    </g>
}
@code {
    public override RenderFragment border =>@<text>
        @using (var temporary_culture = new CultureSwapper())
        {
            <g transform="@PositionAndScale">
                <polygon points="
                            0,0
                            @(Width / 2),@(-Height/2)
                            @(Width),0
                            @(Width*1.5),@(Height/2)
                            @(Width),@(Height)
                            @(Width / 2),@(Height*1.5)
                            0,@(Height)
                            @(-Width/2),@(Height / 2)" 
                         style="@(Hidden ? "display:none" : "")"
                         stroke="@(Hovered ? "#DDDDDD7F" : "transparent")"
                         stroke-width="@(.5 / Zoom)rem"
                         fill="none"
                         @onmouseover="OnBorderOver"
                         @onmouseout="OnBorderOut" />
            </g>
        }
    </text>;
    public override (double RelativeX, double RelativeY) GetDefaultPort()
    {
        return (Width / 2, -Height / 2);
    }
}
