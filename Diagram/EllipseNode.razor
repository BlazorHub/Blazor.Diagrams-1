@inherits NodeBase
@using Excubo.Blazor.Diagrams.Extensions
@if (Deleted)
{
    return;
}
@using (var temporary_culture = new CultureSwapper())
{
    <g transform="@PositionAndScale">
        <ellipse rx="@(Width / 2 * 1.41)"
                 ry="@(Height / 2 * 1.41)"
                 cx="@(Width / 2)"
                 cy="@(Height / 2)"
                 @onmouseover="OnNodeOver"
                 @onmouseout="OnNodeOut"
                 stroke="@Stroke"
                 stroke-width="2px"
                 fill="@Fill"
                 cursor="move"
                 pointer-events="visiblepainted"
                 style="@(Hidden? "display:none;" : "") @(Selected ? "stroke-dasharray: 8 2; animation: diagram-node-selected 0.4s ease infinite;" : "")" />
    </g>
}
@code {
    public override RenderFragment border =>@<text>
        @using (var temporary_culture = new CultureSwapper())
        {
            <g transform="@PositionAndScale">
                <ellipse rx="@(Width / 2 * 1.41)"
                         ry="@(Height / 2 * 1.41)"
                         cx="@(Width / 2)"
                         cy="@(Height / 2)"
                         style="@(Hidden? "display:none" : "")"
                         stroke="@(Hovered ? "#DDDDDD7F" : "transparent")"
                         stroke-width="@(.5 / Zoom)rem"
                         fill="none"
                         cursor="pointer"
                         @onmouseover="OnBorderOver"
                         @onmouseout="OnBorderOut" />
            </g>
        }
    </text>;
    public override (double RelativeX, double RelativeY) GetDefaultPort(Position position = Position.Any)
    {
        return position switch
        {
            Position.North => ((Width / 2), (Height / 2 - (Height / 2 * 1.41))),
            Position.South => ((Width / 2), (Height / 2 + (Height / 2 * 1.41))),
            Position.East => ((Width / 2 + Width / 2 * 1.41), (Height / 2)),
            Position.West => ((Width / 2 - Width / 2 * 1.41), (Height / 2)),
            Position.NorthWest => (0, 0),
            Position.SouthWest => (0, Height),
            Position.NorthEast => (Width, 0),
            Position.SouthEast => (Width, Height),
            _ => (0, 0)
        };
    }
}