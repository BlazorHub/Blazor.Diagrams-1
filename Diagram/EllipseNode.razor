@inherits NodeBase
@using Excubo.Blazor.Diagrams.Extensions
@using (var temporary_culture = new CultureSwapper())
{
    <g transform="translate(@GetCoordinates()) scale(@Zoom) translate(@(-Width / 2) @(-Height / 2))">
        <ellipse rx="calc(@(Width / 2) * 1.41)"
                 ry="calc(@(Height / 2) * 1.41)"
                 cx="@(Width / 2)"
                 cy="@(Height / 2)"
                 @onmouseover="OnNodeOver"
                 @onmouseout="OnNodeOut"
                 stroke="@Stroke"
                 stroke-width="2px"
                 fill="@Fill"
                 style="@(Hidden? "display:none;" : "") @(Selected ? "stroke-dasharray: 8 2; animation: diagram-node-selected 0.4s ease infinite;" : "")" />
    </g>
}
@code {
    public override RenderFragment node_border =>@<NodeBorder @ref="node_border_reference">
    @using (var temporary_culture = new CultureSwapper())
    {
        <g transform="translate(@GetCoordinates()) scale(@Zoom) translate(@(-Width / 2) @(-Height / 2))">
            <ellipse rx="calc(@(Width / 2) * 1.41)"
                     ry="calc(@(Height / 2) * 1.41)"
                     cx="@(Width / 2)"
                     cy="@(Height / 2)"
                     style="@(Hidden? "display:none" : "")"
                     stroke="@(Hovered ? "#EEEEEE" : "transparent")"
                     stroke-width="@(1 / Zoom)rem"
                     fill="none"
                     @onmouseover="OnBorderOver"
                     @onmouseout="OnBorderOut" />
        </g>
    }
</NodeBorder>;
public override (double RelativeX, double RelativeY) GetDefaultPort()
{
return (-Width * 1.41 / 2, 0);
}
}