@inherits LinkBase
@using Excubo.Blazor.Diagrams.Extensions
@if (Deleted)
{
    return;
}
@using (var temporary_culture = new CultureSwapper())
{
    <g transform="scale(@Zoom)">
        @if (ControlPoints.Count == 2)
        {
            <line x1="@ControlPoints[0].X"
                  y1="@ControlPoints[0].Y"
                  x2="@ControlPoints[1].X"
                  y2="@ControlPoints[1].Y"
                  stroke="black"
                  stroke-width="3"
                  @onmouseover="OnLinkOver"
                  @onmouseout="OnLinkOut" />
            if (Arrow == Arrow.Both || Arrow == Arrow.Target)
            {
                var cp = ControlPoints.Last();
                var other = ControlPoints.First();
                var angle = Math.Atan2(other.Y - cp.Y, other.X - cp.X) * 180 / Math.PI - 90;
                <g transform="translate(@(cp.X) @(cp.Y)) rotate(@(angle))">
                    <polygon points="0,-6 4,0 -4,0" fill="black" />
                </g>
            }
            if (Arrow == Arrow.Both)
            {
                var cp = ControlPoints.First();
                var other = ControlPoints.Last();
                var angle = Math.Atan2(other.Y - cp.Y, other.X - cp.X) * 180 / Math.PI - 90;
                <g transform="translate(@(cp.X) @(cp.Y)) rotate(@(angle))">
                    <polygon points="0,-6 4,0 -4,0" fill="black" />
                </g>
            }
            if (Selected)
            {
                foreach (var cp in ControlPoints)
                {
                    <ellipse cx="@cp.X" cy="@cp.Y" rx="6" ry="6" fill="green" @onmouseover="cp.OnMouseOver" @onmouseout="@cp.OnMouseOut" />
                }
            }
        }
    </g>
}
@code {
    protected override void OnParametersSet()
    {
        if (ControlPointMethods == null)
        {
            ControlPointMethods = new List<Func<(double X, double Y)>>();
        }
        base.OnParametersSet();
    }
}