@inherits LinkBase
@using Excubo.Blazor.Diagrams.Extensions
@if (Deleted)
{
    return;
}
@using (var temporary_culture = new CultureSwapper())
{
    <g transform="scale(@Zoom)">
        @if (ControlPoints.Count == 4)
        {
            <path d="M @(ControlPoints[0].X) @(ControlPoints[0].Y)
                     C @(ControlPoints[1].X) @(ControlPoints[1].Y)
                       @(ControlPoints[2].X) @(ControlPoints[2].Y),
                       @(ControlPoints[3].X) @(ControlPoints[3].Y)"
                  stroke-width="@(3 * Zoom)"
                  fill="none"
                  stroke="black"
                  @onmouseover="OnLinkOver"
                  @onmouseout="OnLinkOut" />
            @if (Selected)
            {
                <line x1="@ControlPoints[0].X" x2="@ControlPoints[1].X" y1="@ControlPoints[0].Y" y2="@ControlPoints[1].Y" stroke="gray" style="stroke-dasharray: 4 4;" />
                <line x1="@ControlPoints[2].X" x2="@ControlPoints[3].X" y1="@ControlPoints[2].Y" y2="@ControlPoints[3].Y" stroke="gray" style="stroke-dasharray: 4 4;" />
                foreach (var cp in ControlPoints.Skip(1).Take(2))
                {
                    <ellipse cx="@cp.X" cy="@cp.Y" rx="8" ry="8" fill="green" @onmouseover="cp.OnMouseOver" @onmouseout="@cp.OnMouseOut" />
                }
            }
        }
    </g>
}
@code {
    [Parameter]
    public bool CurveTopBottom { get; set; }
    private (double X, double Y) GetFirstCurvePoint()
    {
        return CurveTopBottom ? (Source.X, (Source.Y + Target.Y) / 2) : ((Source.X + Target.X) / 2, Source.Y);
    }
    private (double X, double Y) GetSecondCurvePoint()
    {
        return CurveTopBottom ? (Target.X, (Source.Y + Target.Y) / 2) : ((Source.X + Target.X) / 2, Target.Y);
    }
    protected override void OnParametersSet()
    {
        if (ControlPointMethods == null)
        {
            ControlPointMethods = new List<Func<(double X, double Y)>>
            {
                GetFirstCurvePoint,
                GetSecondCurvePoint
            };
        }
        base.OnParametersSet();
    }
}